import telebot as tb
from db_funcs import *
import random
from math import ceil

bot = tb.TeleBot('token')

action_keyboard = tb.types.ReplyKeyboardMarkup()
action_keyboard.row(tb.types.KeyboardButton("–ì–æ—Ç–æ–≤"))


@bot.message_handler(commands=['start', 'restart'])
def welcome(message):
    create_database()
    bot.send_message(
        message.from_user.id,
        '–ó–¥–∞—Ä–∞–≤—Å—Ç–≤—É–π, –∏–≥—Ä–æ–∫!\n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å—ã–≥—Ä–∞—Ç—å —Ç–µ–±–µ –≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π—à—É—é –∏–≥—Ä—É —Å –Ω–µ–º–µ–Ω–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π—à–∏–º –ø—Ä–∏–∑–æ–º.\n\n<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n\t1) –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0 –æ—á–∫–æ–≤\n\t2) –ù–∞ –∫–∞–∂–¥–æ–º —Ö–æ–¥—É, –º—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –≤—ã–±–∏—Ä–∞–µ–º —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10 –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –∏—Ç–æ–≥–æ–≤–æ–º—É —Å—á–µ—Ç—É\n\t3) –ü–µ—Ä–≤—ã–π –∫—Ç–æ –¥–æ–±–µ—Ä–µ—Ç—Å—è –∫ —Å—á–µ—Ç—É –±–æ–ª—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω–æ–º—É 100 –ø–æ–±–µ–∂–¥–∞–µ—Ç.\n\n<b>–ì–æ—Ç–æ–≤?</b>',
        parse_mode='html',
        reply_markup=action_keyboard
    )
    bot.register_next_step_handler(message, start_game)


def start_game(mes):
    user_id = int(mes.chat.id)
    reset_or_create_user(user_id)

    x = random.randint(1, 10)

    bot.send_message(
        user_id,
        f'–Ø –Ω–∞—á–Ω—É\n\n<b>{x}</b>',
        parse_mode='html'
    )
    update_total_score(user_id, x)
    bot.register_next_step_handler(mes, mid_part)


def mid_part(mes):
    user_id = int(mes.chat.id)

    try:
        user_input = mes.text.strip()
        if not user_input.isdigit():
            raise ValueError("–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ")

        num = int(user_input)
        if not (1 <= num <= 10):
            bot.send_message(user_id, "–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
            bot.register_next_step_handler(mes, mid_part)
            return

        update_total_score(user_id, num)
        current_score = get_current_score(user_id)

        bot.send_message(
            user_id,
            f"–¢–µ–∫—É—â–∏–π –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: <b>{current_score}</b>",
            parse_mode='html'
        )

        if current_score >= 100:
            bot.send_message(user_id, "üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª!")
            reset_or_create_user(user_id)
            return

        if current_score > 60:
            x = min(ceil(current_score / 11) * 11 + 1 - current_score, 10)
            if x < 1 or x > 10:
                x = random.randint(1, 10)
        else:
            x = random.randint(1, 10)

        update_total_score(user_id, x)
        current_score = get_current_score(user_id)

        bot.send_message(user_id, f"–ú–æ–π —Ö–æ–¥: <b>{x}</b>", parse_mode='html')
        bot.send_message(
            user_id,
            f"–¢–µ–∫—É—â–∏–π –∏—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: <b>{current_score}</b>",
            parse_mode='html'
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É –±–æ—Ç–∞
        if current_score >= 100:
            bot.send_message(
                user_id,
                "üò¢ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª. –ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª!\n"
                "–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏ /start"
            )
            reset_or_create_user(user_id)
            return

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        bot.register_next_step_handler(mes, mid_part)

    except Exception as e:
        bot.send_message(
            user_id,
            "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ. –Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10!"
        )
        bot.register_next_step_handler(mes, mid_part)


if __name__ == '__main__':
    bot.enable_save_next_step_handlers(delay=1)
    bot.load_next_step_handlers()
    bot.polling(skip_pending=True)
